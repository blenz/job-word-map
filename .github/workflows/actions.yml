name: Deploy App

on:
  push:
    branches:
      - main
      - deploy/*

permissions:
  id-token: write
  contents: read

jobs:
  terraform-apply:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Restore Terraform
        id: terraform-cache
        uses: actions/cache@v4
        with:
          path: ci/cache/docker/terraform
          key: ${{ hashFiles('./infra/Dockerfile') }}

      - name: Build Terraform
        if: steps.terraform-cache.outputs.cache-hit != 'true'
        run: |
          docker build -t terraform infra/
          mkdir -p ci/cache/docker/terraform
          docker image save terraform --output ./ci/cache/docker/terraform/image.tar

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ vars.DEPLOY_ROLE_ARN }}
          role-session-name: terraform

      - name: Terraform Apply
        run: |
          docker image load -q --input ./ci/cache/docker/terraform/image.tar

          for cmd in init apply; do
            docker run --rm --entrypoint terraform \
              -w /tmp/terraform \
              -v $PWD/infra:/tmp/terraform \
              -e TF_CLI_ARGS_apply=-auto-approve \
              -e AWS_REGION=${{ vars.AWS_REGION }} \
              -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
              -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
              -e AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN \
              -e TF_VAR_github_token=${{ secrets.GH_TOKEN }} \
              -e TF_VAR_rapid_api_key=${{ secrets.RAPID_API_KEY }} \
              terraform $cmd
          done
